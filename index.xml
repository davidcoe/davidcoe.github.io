<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>David M. Coe · Bio</title>
    <link>https://davidmcoe.com/</link>
    <description>Recent content on David M. Coe · Bio</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Aug 2024 12:17:52 -0400</lastBuildDate>
    <atom:link href="https://davidmcoe.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Phonetic Alphabet</title>
      <link>https://davidmcoe.com/posts/phonetic-alphabet/</link>
      <pubDate>Thu, 22 Aug 2024 12:17:52 -0400</pubDate>
      <guid>https://davidmcoe.com/posts/phonetic-alphabet/</guid>
      <description>&lt;h1 id=&#34;phonetic-alphabet&#34;&gt;Phonetic Alphabet&lt;/h1&gt;&#xA;&lt;script&gt;&#xA;    // TODO is there a better way to load this from json?&#xA;    // TODO is this structure best or should this be a map?&#xA;    // TODO Could I offer other alphabets or allow customization?&#xA;    const phoneticAlphabet = [&#xA;        {&#xA;            &#34;symbol&#34;: &#34;A&#34;,&#xA;            &#34;code&#34;: &#34;Alfa&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;B&#34;,&#xA;            &#34;code&#34;: &#34;Bravo&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;C&#34;,&#xA;            &#34;code&#34;: &#34;Charlie&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;D&#34;,&#xA;            &#34;code&#34;: &#34;Delta&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;E&#34;,&#xA;            &#34;code&#34;: &#34;Echo&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;F&#34;,&#xA;            &#34;code&#34;: &#34;Foxtrot&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;G&#34;,&#xA;            &#34;code&#34;: &#34;Golf&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;H&#34;,&#xA;            &#34;code&#34;: &#34;Hotel&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;I&#34;,&#xA;            &#34;code&#34;: &#34;India&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;J&#34;,&#xA;            &#34;code&#34;: &#34;Juliett&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;K&#34;,&#xA;            &#34;code&#34;: &#34;Kilo&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;L&#34;,&#xA;            &#34;code&#34;: &#34;Lima&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;M&#34;,&#xA;            &#34;code&#34;: &#34;Mike&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;N&#34;,&#xA;            &#34;code&#34;: &#34;November&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;O&#34;,&#xA;            &#34;code&#34;: &#34;Oscar&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;P&#34;,&#xA;            &#34;code&#34;: &#34;Papa&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;Q&#34;,&#xA;            &#34;code&#34;: &#34;Quebec&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;R&#34;,&#xA;            &#34;code&#34;: &#34;Romeo&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;S&#34;,&#xA;            &#34;code&#34;: &#34;Sierra&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;T&#34;,&#xA;            &#34;code&#34;: &#34;Tango&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;U&#34;,&#xA;            &#34;code&#34;: &#34;Uniform&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;V&#34;,&#xA;            &#34;code&#34;: &#34;Victor&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;W&#34;,&#xA;            &#34;code&#34;: &#34;Whiskey&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;X&#34;,&#xA;            &#34;code&#34;: &#34;Xray&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;Y&#34;,&#xA;            &#34;code&#34;: &#34;Yankee&#34;&#xA;        },&#xA;        {&#xA;            &#34;symbol&#34;: &#34;Z&#34;,&#xA;            &#34;code&#34;: &#34;Zulu&#34;&#xA;        }&#xA;    ]&#xA;&lt;/script&gt;&#xA;&lt;script&gt;&#xA;    const debounce = (func, wait_ms = 50) =&gt; {&#xA;        let timeoutID = undefined;&#xA;        return (...args) =&gt; {&#xA;            window.clearTimeout(timeoutID);&#xA;            timeoutID = window.setTimeout(() =&gt; func(...args), wait_ms);&#xA;        };&#xA;    }&#xA;&#xA;    const updatePhoneticMessage = (event) =&gt; {&#xA;        const inputText = event.target.value;&#xA;&#xA;        const codes = inputText.toUpperCase().replace(/[^A-Z]/g, &#39;&#39;).split(&#39;&#39;).map((letter) =&gt; {&#xA;            // TODO I could have an alphabet with multiples and then randomly pick one&#xA;            const code = phoneticAlphabet.find((code) =&gt; code.symbol == letter);&#xA;            // TODO I could try to look up words for non matches&#xA;            // TODO This doesn&#39;t do much because I strip non-alpha and have them all mapped, but I could get more fancy in the future&#xA;            return code ? code : { &#34;symbol&#34;: letter, &#34;code&#34;: &#34;?&#34; };&#xA;        });&#xA;&#xA;        const outputElement = document.getElementById(&#39;output-message&#39;);&#xA;        // TODO Phonetic messages are going to be short, but if that&#39;s wrong this isn&#39;t going to go well... I could try to be smart and only remove what&#39;s changed, but let&#39;s see if the naive approach works.&#xA;        while (outputElement.hasChildNodes()) {&#xA;            outputElement.removeChild(outputElement.lastChild);&#xA;        }&#xA;&#xA;        codes.forEach((code) =&gt; {&#xA;            const codeSpan = document.createElement(&#39;span&#39;);&#xA;            codeSpan.innerHTML = `&lt;b&gt;${code.code}&lt;/b&gt;`;&#xA;&#xA;            const symbolSpan = document.createElement(&#39;span&#39;);&#xA;            symbolSpan.innerHTML = code.symbol;&#xA;&#xA;            const d = document.createElement(&#39;span&#39;);&#xA;            d.setAttribute(&#34;class&#34;, &#34;codeContainer&#34;);&#xA;            d.append(codeSpan);&#xA;            d.append(symbolSpan);&#xA;&#xA;            outputElement.append(d);&#xA;        });&#xA;    }&#xA;&#xA;    document.addEventListener(&#34;DOMContentLoaded&#34;, () =&gt; {&#xA;        const element = document.getElementById(&#39;input-message&#39;);&#xA;        element.addEventListener(&#39;input&#39;, debounce(updatePhoneticMessage, 500));&#xA;        // Autocomplete is enabled so the browser might autofill the input&#xA;        // of the text area. Let&#39;s fire an event to make sure that is handled.&#xA;        element.dispatchEvent(new Event(&#39;input&#39;));&#xA;    });&#xA;&lt;/script&gt;&#xA;&lt;style&gt;&#xA;        .container {&#xA;            display: flex;&#xA;            gap: 1em;&#xA;            flex-wrap: wrap;&#xA;        }&#xA;        .codeContainer {&#xA;            display: flex;&#xA;            flex-direction: column;&#xA;            align-items: center;&#xA;        }&#xA;&lt;/style&gt;&#xA;&lt;textarea id=&#34;input-message&#34;&gt;&lt;/textarea&gt;&#xA;&lt;div id=&#34;output-message&#34; class=&#34;container&#34;&gt;&lt;/div&gt;&#xA;&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;&#xA;&lt;p&gt;&amp;ldquo;NATO phonetic alphabet - Wikipedia&amp;rdquo;. &lt;a href=&#34;https://en.wikipedia.org/wiki/NATO_phonetic_alphabet&#34;&gt;https://en.wikipedia.org/wiki/NATO_phonetic_alphabet&lt;/a&gt;. Accessed 02 Sep. 2022&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nautical Flags</title>
      <link>https://davidmcoe.com/posts/nautical-flags/</link>
      <pubDate>Fri, 02 Sep 2022 15:54:14 +0000</pubDate>
      <guid>https://davidmcoe.com/posts/nautical-flags/</guid>
      <description>&lt;h1 id=&#34;maritime-signal-flags&#34;&gt;Maritime Signal Flags&lt;/h1&gt;&#xA;&lt;h2 id=&#34;encode-maritime-signal-flags&#34;&gt;Encode Maritime Signal Flags&lt;/h2&gt;&#xA;&lt;style&gt;&#xA;   &#xA;    .message-flag {&#xA;        height: 100px;&#xA;        width: 100px;&#xA;        margin: 2px;&#xA;        padding: 2px;&#xA;        border-color: var(--background-color-softer);&#xA;    }&#xA;    &#xA;&lt;/style&gt;&#xA;&lt;script&gt;&#xA;    const natoPhoneticAlphabet = {&#xA;        &#34;A&#34;: &#34;Alpha&#34;,&#xA;        &#34;B&#34;: &#34;Bravo&#34;,&#xA;        &#34;C&#34;: &#34;Charlie&#34;,&#xA;        &#34;D&#34;: &#34;Delta&#34;,&#xA;        &#34;E&#34;: &#34;Echo&#34;,&#xA;        &#34;F&#34;: &#34;Foxtrot&#34;,&#xA;        &#34;G&#34;: &#34;Golf&#34;,&#xA;        &#34;H&#34;: &#34;Hotel&#34;,&#xA;        &#34;I&#34;: &#34;India&#34;,&#xA;        &#34;J&#34;: &#34;Juliet&#34;,&#xA;        &#34;K&#34;: &#34;Kilo&#34;,&#xA;        &#34;L&#34;: &#34;Lima&#34;,&#xA;        &#34;M&#34;: &#34;Mike&#34;,&#xA;        &#34;N&#34;: &#34;November&#34;,&#xA;        &#34;O&#34;: &#34;Oscar&#34;,&#xA;        &#34;P&#34;: &#34;Papa&#34;,&#xA;        &#34;Q&#34;: &#34;Quebec&#34;,&#xA;        &#34;R&#34;: &#34;Romeo&#34;,&#xA;        &#34;S&#34;: &#34;Sierra&#34;,&#xA;        &#34;T&#34;: &#34;Tango&#34;,&#xA;        &#34;U&#34;: &#34;Uniform&#34;,&#xA;        &#34;V&#34;: &#34;Victor&#34;,&#xA;        &#34;W&#34;: &#34;Whiskey&#34;,&#xA;        &#34;X&#34;: &#34;X-ray&#34;,&#xA;        &#34;Y&#34;: &#34;Yankee&#34;,&#xA;        &#34;Z&#34;: &#34;Zulu&#34;&#xA;    }&#xA;&#xA;    const debounce = (func, wait_ms=50) =&gt; { &#xA;        let timeoutID = undefined;&#xA;        console.log(&#34;Creating wrapper function&#34;);&#xA;        return (...args) =&gt; {&#xA;            window.clearTimeout(timeoutID);&#xA;            console.log(`Executing wrapper function ${args}`);&#xA;            timeoutID = window.setTimeout(() =&gt; func(...args), wait_ms);&#xA;        };&#xA;    }&#xA;&#xA;    const updateFlags = (event) =&gt; {&#xA;        const resultFlags = document.getElementById(&#39;input-result&#39;);&#xA;        resultFlags.innerHTML = &#39;&#39;;&#xA;&#xA;        const inputText = event.target.value.toUpperCase().replace(/[^A-Z]/g, &#39;&#39;);&#xA;&#xA;        if(inputText) {&#xA;            inputText.split(&#39;&#39;).forEach((letter) =&gt; {&#xA;                const nato = natoPhoneticAlphabet[letter];&#xA;                if (!nato) {&#xA;                    console.log(`Unable to find a nato value for ${letter}!`);&#xA;                }&#xA;                const img = document.createElement(&#39;img&#39;);&#xA;                img.setAttribute(&#39;class&#39;, &#39;message-flag&#39;);&#xA;                img.setAttribute(&#39;src&#39;, `/img/maritime-signal-flags/ICS_${nato}.svg`);&#xA;                img.setAttribute(&#39;alt&#39;, nato);&#xA;                &#xA;                resultFlags.appendChild(img);&#xA;            });&#xA;        }&#xA;    }&#xA;    document.addEventListener(&#34;DOMContentLoaded&#34;, () =&gt; document.getElementById(&#39;input-message&#39;).addEventListener(&#39;input&#39;, debounce(updateFlags, 500)));&#xA;&lt;/script&gt;&#xA;&lt;div class=&#34;grid-container full autocenter&#34; style=&#34;text-align: center&#34;&gt;&#xA;    &lt;label for=&#34;input-message&#34;&gt;Message&lt;/label&gt;&#xA;    &lt;textarea class=&#34;u-full-width&#34; placeholder=&#34;Your message …&#34; id=&#34;input-message&#34; pattern=&#34;[A-Za-z]&#34;&gt;&lt;/textarea&gt;&#xA;    &lt;div class=&#34;row&#34; id=&#34;input-result&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;decode-maritime-signal-flags&#34;&gt;Decode Maritime Signal Flags&lt;/h2&gt;&#xA;&lt;script&gt;&#xA;    const decodeFlags = (event) =&gt; {&#xA;        if (event.target.className === &#34;message-flag&#34;) {&#xA;            document.getElementById(&#39;decode-message&#39;).innerHTML += event.target.alt[0]&#xA;        }&#xA;    }&#xA;&#xA;    document.addEventListener(&#34;DOMContentLoaded&#34;, () =&gt; document.getElementById(&#39;decode-flag&#39;).addEventListener(&#39;click&#39;, decodeFlags));    &#xA;&lt;/script&gt;&#xA;&lt;div class=&#34;grid-container full autocenter&#34;&gt;&#xA;    &lt;div class=&#34;row&#34; id=&#34;decode-flag&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Alpha.svg&#34; alt=&#34;Alpha&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Bravo.svg&#34; alt=&#34;Bravo&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Charlie.svg&#34; alt=&#34;Charlie&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Delta.svg&#34; alt=&#34;Delta&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Echo.svg&#34; alt=&#34;Echo&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Foxtrot.svg&#34; alt=&#34;Foxtrot&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Golf.svg&#34; alt=&#34;Golf&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Hotel.svg&#34; alt=&#34;Hotel&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_India.svg&#34; alt=&#34;India&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Juliet.svg&#34; alt=&#34;Juliet&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Kilo.svg&#34; alt=&#34;Kilo&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Lima.svg&#34; alt=&#34;Lima&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Mike.svg&#34; alt=&#34;Mike&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_November.svg&#34; alt=&#34;November&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Oscar.svg&#34; alt=&#34;Oscar&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Papa.svg&#34; alt=&#34;Papa&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Quebec.svg&#34; alt=&#34;Quebec&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Romeo.svg&#34; alt=&#34;Romeo&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Sierra.svg&#34; alt=&#34;Sierra&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Tango.svg&#34; alt=&#34;Tango&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Uniform.svg&#34; alt=&#34;Uniform&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Victor.svg&#34; alt=&#34;Victor&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Whiskey.svg&#34; alt=&#34;Whiskey&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_X-ray.svg&#34; alt=&#34;X-ray&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Yankee.svg&#34; alt=&#34;Yankee&#34;&gt;&#xA;        &lt;img class=&#34;message-flag&#34; src=&#34;./img/maritime-signal-flags/ICS_Zulu.svg&#34; alt=&#34;Zulu&#34;&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;textarea class=&#34;u-full-width&#34; placeholder=&#34;&#34; id=&#34;decode-message&#34;&gt;&lt;/textarea&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;&#xA;&lt;p&gt;I keep finding these nautical flags (I supposed they&amp;rsquo;re really called maritime signal flags) all over, including in kids books. It feels like a hidden code&#xA;that&amp;rsquo;s a little bit inaccessible. I wanted to create a simple app that would let me decode them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Username Generator</title>
      <link>https://davidmcoe.com/posts/username-generator/</link>
      <pubDate>Thu, 25 Aug 2022 22:28:38 +0000</pubDate>
      <guid>https://davidmcoe.com/posts/username-generator/</guid>
      <description>&lt;style&gt;&#xA;    @media (min-width: 600px) {&#xA;        .value-header {&#xA;            grid-column: 1 / span 2;&#xA;        }&#xA;    }&#xA;&lt;/style&gt;&#xA;&lt;script&gt;&#xA;    var adjs = [&#xA;        &#34;autumn&#34;, &#34;hidden&#34;, &#34;bitter&#34;, &#34;misty&#34;, &#34;silent&#34;, &#34;empty&#34;, &#34;dry&#34;, &#34;dark&#34;,&#xA;        &#34;summer&#34;, &#34;icy&#34;, &#34;delicate&#34;, &#34;quiet&#34;, &#34;white&#34;, &#34;cool&#34;, &#34;spring&#34;, &#34;winter&#34;,&#xA;        &#34;patient&#34;, &#34;twilight&#34;, &#34;dawn&#34;, &#34;crimson&#34;, &#34;wispy&#34;, &#34;weathered&#34;, &#34;blue&#34;,&#xA;        &#34;billowing&#34;, &#34;broken&#34;, &#34;cold&#34;, &#34;damp&#34;, &#34;falling&#34;, &#34;frosty&#34;, &#34;green&#34;,&#xA;        &#34;long&#34;, &#34;late&#34;, &#34;lingering&#34;, &#34;bold&#34;, &#34;little&#34;, &#34;morning&#34;, &#34;muddy&#34;, &#34;old&#34;,&#xA;        &#34;red&#34;, &#34;rough&#34;, &#34;still&#34;, &#34;small&#34;, &#34;sparkling&#34;, &#34;throbbing&#34;, &#34;shy&#34;,&#xA;        &#34;wandering&#34;, &#34;withered&#34;, &#34;wild&#34;, &#34;black&#34;, &#34;young&#34;, &#34;holy&#34;, &#34;solitary&#34;,&#xA;        &#34;fragrant&#34;, &#34;aged&#34;, &#34;snowy&#34;, &#34;proud&#34;, &#34;floral&#34;, &#34;restless&#34;, &#34;divine&#34;,&#xA;        &#34;polished&#34;, &#34;ancient&#34;, &#34;purple&#34;, &#34;lively&#34;, &#34;nameless&#34;&#xA;    ];&#xA;&#xA;    var nouns = [&#xA;        &#34;waterfall&#34;, &#34;river&#34;, &#34;breeze&#34;, &#34;moon&#34;, &#34;rain&#34;, &#34;wind&#34;, &#34;sea&#34;, &#34;morning&#34;,&#xA;        &#34;snow&#34;, &#34;lake&#34;, &#34;sunset&#34;, &#34;pine&#34;, &#34;shadow&#34;, &#34;leaf&#34;, &#34;dawn&#34;, &#34;glitter&#34;,&#xA;        &#34;forest&#34;, &#34;hill&#34;, &#34;cloud&#34;, &#34;meadow&#34;, &#34;sun&#34;, &#34;glade&#34;, &#34;bird&#34;, &#34;brook&#34;,&#xA;        &#34;butterfly&#34;, &#34;bush&#34;, &#34;dew&#34;, &#34;dust&#34;, &#34;field&#34;, &#34;fire&#34;, &#34;flower&#34;, &#34;firefly&#34;,&#xA;        &#34;feather&#34;, &#34;grass&#34;, &#34;haze&#34;, &#34;mountain&#34;, &#34;night&#34;, &#34;pond&#34;, &#34;darkness&#34;,&#xA;        &#34;snowflake&#34;, &#34;silence&#34;, &#34;sound&#34;, &#34;sky&#34;, &#34;shape&#34;, &#34;surf&#34;, &#34;thunder&#34;,&#xA;        &#34;violet&#34;, &#34;water&#34;, &#34;wildflower&#34;, &#34;wave&#34;, &#34;water&#34;, &#34;resonance&#34;, &#34;sun&#34;,&#xA;        &#34;wood&#34;, &#34;dream&#34;, &#34;cherry&#34;, &#34;tree&#34;, &#34;fog&#34;, &#34;frost&#34;, &#34;voice&#34;, &#34;paper&#34;,&#xA;        &#34;frog&#34;, &#34;smoke&#34;, &#34;star&#34;&#xA;    ];&#xA;&#xA;    const things = [&#xA;        &#34;angle&#34;, &#34;ant&#34;, &#34;apple&#34;, &#34;arch&#34;, &#34;arm&#34;, &#34;army&#34;, &#34;baby&#34;, &#34;bag&#34;, &#34;ball&#34;, &#34;band&#34;, &#34;basin&#34;, &#34;basket&#34;, &#34;bath&#34;, &#34;bed&#34;,&#xA;        &#34;bee&#34;, &#34;bell&#34;, &#34;berry&#34;, &#34;bird&#34;, &#34;blade&#34;, &#34;board&#34;, &#34;boat&#34;, &#34;bone&#34;, &#34;book&#34;, &#34;boot&#34;, &#34;bottle&#34;, &#34;box&#34;, &#34;boy&#34;, &#34;brain&#34;,&#xA;        &#34;brake&#34;, &#34;branch&#34;, &#34;brick&#34;, &#34;bridge&#34;, &#34;brush&#34;, &#34;bucket&#34;, &#34;bulb&#34;, &#34;button&#34;, &#34;cake&#34;, &#34;camera&#34;, &#34;card&#34;, &#34;cart&#34;,&#xA;        &#34;carriage&#34;, &#34;cat&#34;, &#34;chain&#34;, &#34;cheese&#34;, &#34;chest&#34;, &#34;chin&#34;, &#34;church&#34;, &#34;circle&#34;, &#34;clock&#34;, &#34;cloud&#34;, &#34;coat&#34;, &#34;collar&#34;,&#xA;        &#34;comb&#34;, &#34;cord&#34;, &#34;cow&#34;, &#34;cup&#34;, &#34;curtain&#34;, &#34;cushion&#34;, &#34;dog&#34;, &#34;door&#34;, &#34;drain&#34;, &#34;drawer&#34;, &#34;dress&#34;, &#34;drop&#34;, &#34;ear&#34;, &#34;egg&#34;,&#xA;        &#34;engine&#34;, &#34;eye&#34;, &#34;face&#34;, &#34;farm&#34;, &#34;feather&#34;, &#34;finger&#34;, &#34;fish&#34;, &#34;flag&#34;, &#34;floor&#34;, &#34;fly&#34;, &#34;foot&#34;, &#34;fork&#34;, &#34;fowl&#34;,&#xA;        &#34;frame&#34;, &#34;garden&#34;, &#34;girl&#34;, &#34;glove&#34;, &#34;goat&#34;, &#34;gun&#34;, &#34;hair&#34;, &#34;hammer&#34;, &#34;hand&#34;, &#34;hat&#34;, &#34;head&#34;, &#34;heart&#34;, &#34;hook&#34;, &#34;horn&#34;,&#xA;        &#34;horse&#34;, &#34;hospital&#34;, &#34;house&#34;, &#34;island&#34;, &#34;jewel&#34;, &#34;kettle&#34;, &#34;key&#34;, &#34;knee&#34;, &#34;knife&#34;, &#34;knot&#34;, &#34;leaf&#34;, &#34;leg&#34;, &#34;library&#34;,&#xA;        &#34;line&#34;, &#34;lip&#34;, &#34;lock&#34;, &#34;map&#34;, &#34;match&#34;, &#34;monkey&#34;, &#34;moon&#34;, &#34;mouth&#34;, &#34;muscle&#34;, &#34;nail&#34;, &#34;neck&#34;, &#34;needle&#34;, &#34;nerve&#34;,&#xA;        &#34;net&#34;, &#34;nose&#34;, &#34;nut&#34;, &#34;office&#34;, &#34;orange&#34;, &#34;oven&#34;, &#34;parcel&#34;, &#34;pen&#34;, &#34;pencil&#34;, &#34;picture&#34;, &#34;pig&#34;, &#34;pin&#34;, &#34;pipe&#34;,&#xA;        &#34;plane&#34;, &#34;plate&#34;, &#34;plough&#34;, &#34;pocket&#34;, &#34;pot&#34;, &#34;potato&#34;, &#34;prison&#34;, &#34;pump&#34;, &#34;rail&#34;, &#34;rat&#34;, &#34;receipt&#34;, &#34;ring&#34;, &#34;rod&#34;,&#xA;        &#34;roof&#34;, &#34;root&#34;, &#34;sail&#34;, &#34;school&#34;, &#34;scissors&#34;, &#34;screw&#34;, &#34;seed&#34;, &#34;sheep&#34;, &#34;shelf&#34;, &#34;ship&#34;, &#34;shirt&#34;, &#34;shoe&#34;, &#34;skin&#34;,&#xA;        &#34;skirt&#34;, &#34;snake&#34;, &#34;sock&#34;, &#34;spade&#34;, &#34;sponge&#34;, &#34;spoon&#34;, &#34;spring&#34;, &#34;square&#34;, &#34;stamp&#34;, &#34;star&#34;, &#34;station&#34;, &#34;stem&#34;,&#xA;        &#34;stick&#34;, &#34;stocking&#34;, &#34;stomach&#34;, &#34;store&#34;, &#34;street&#34;, &#34;sun&#34;, &#34;table&#34;, &#34;tail&#34;, &#34;thread&#34;, &#34;throat&#34;, &#34;thumb&#34;, &#34;ticket&#34;,&#xA;        &#34;toe&#34;, &#34;tongue&#34;, &#34;tooth&#34;, &#34;town&#34;, &#34;train&#34;, &#34;tray&#34;, &#34;tree&#34;, &#34;trousers&#34;, &#34;umbrella&#34;, &#34;wall&#34;, &#34;watch&#34;, &#34;wheel&#34;, &#34;whip&#34;,&#xA;        &#34;whistle&#34;, &#34;window&#34;, &#34;wing&#34;, &#34;wire&#34;, &#34;worm&#34;&#xA;    ];&#xA;&#xA;    const qualities_descriptive = [&#xA;        &#34;able&#34;, &#34;acid&#34;, &#34;angry&#34;, &#34;automatic&#34;, &#34;beautiful&#34;, &#34;black&#34;, &#34;boiling&#34;, &#34;bright&#34;, &#34;broken&#34;, &#34;brown&#34;, &#34;cheap&#34;,&#xA;        &#34;chemical&#34;, &#34;chief&#34;, &#34;clean&#34;, &#34;clear&#34;, &#34;common&#34;, &#34;complex&#34;, &#34;conscious&#34;, &#34;cut&#34;, &#34;deep&#34;, &#34;dependent&#34;, &#34;early&#34;,&#xA;        &#34;elastic&#34;, &#34;electric&#34;, &#34;equal&#34;, &#34;fat&#34;, &#34;fertile&#34;, &#34;first&#34;, &#34;fixed&#34;, &#34;flat&#34;, &#34;free&#34;, &#34;frequent&#34;, &#34;full&#34;, &#34;general&#34;,&#xA;        &#34;good&#34;, &#34;great&#34;, &#34;grey&#34;, &#34;hanging&#34;, &#34;happy&#34;, &#34;hard&#34;, &#34;healthy&#34;, &#34;high&#34;, &#34;hollow&#34;, &#34;important&#34;, &#34;kind&#34;, &#34;like&#34;,&#xA;        &#34;living&#34;, &#34;long&#34;, &#34;male&#34;, &#34;married&#34;, &#34;material&#34;, &#34;medical&#34;, &#34;military&#34;, &#34;natural&#34;, &#34;necessary&#34;, &#34;new&#34;, &#34;normal&#34;,&#xA;        &#34;open&#34;, &#34;parallel&#34;, &#34;past&#34;, &#34;physical&#34;, &#34;political&#34;, &#34;poor&#34;, &#34;possible&#34;, &#34;present&#34;, &#34;private&#34;, &#34;probable&#34;, &#34;quick&#34;,&#xA;        &#34;quiet&#34;, &#34;ready&#34;, &#34;red&#34;, &#34;regular&#34;, &#34;responsible&#34;, &#34;right&#34;, &#34;round&#34;, &#34;same&#34;, &#34;second&#34;, &#34;separate&#34;, &#34;serious&#34;,&#xA;        &#34;sharp&#34;, &#34;smooth&#34;, &#34;sticky&#34;, &#34;stiff&#34;, &#34;straight&#34;, &#34;strong&#34;, &#34;sudden&#34;, &#34;sweet&#34;, &#34;tall&#34;, &#34;thick&#34;, &#34;tight&#34;, &#34;tired&#34;,&#xA;        &#34;true&#34;, &#34;violent&#34;, &#34;waiting&#34;, &#34;warm&#34;, &#34;wet&#34;, &#34;wide&#34;, &#34;wise&#34;, &#34;yellow&#34;, &#34;young&#34;&#xA;    ];&#xA;&#xA;    const qualities_opposites = [&#xA;        &#34;awake&#34;, &#34;bad&#34;, &#34;bent&#34;, &#34;bitter&#34;, &#34;blue&#34;, &#34;certain&#34;, &#34;cold&#34;, &#34;complete&#34;, &#34;cruel&#34;, &#34;dark&#34;, &#34;dead&#34;, &#34;dear&#34;,&#xA;        &#34;delicate&#34;, &#34;different&#34;, &#34;dirty&#34;, &#34;dry&#34;, &#34;false&#34;, &#34;feeble&#34;, &#34;female&#34;, &#34;foolish&#34;, &#34;future&#34;, &#34;green&#34;, &#34;ill&#34;,&#xA;        &#34;last&#34;, &#34;late&#34;, &#34;left&#34;, &#34;loose&#34;, &#34;loud&#34;, &#34;low&#34;, &#34;mixed&#34;, &#34;narrow&#34;, &#34;old&#34;, &#34;opposite&#34;, &#34;public&#34;, &#34;rough&#34;, &#34;sad&#34;,&#xA;        &#34;safe&#34;, &#34;secret&#34;, &#34;short&#34;, &#34;shut&#34;, &#34;simple&#34;, &#34;slow&#34;, &#34;small&#34;, &#34;soft&#34;, &#34;solid&#34;, &#34;special&#34;, &#34;strange&#34;, &#34;thin&#34;,&#xA;        &#34;white&#34;, &#34;wrong&#34;&#xA;    ];&#xA;&#xA;    const qualities = qualities_descriptive + qualities_opposites;&#xA;&#xA;    const sample = (arr) =&gt; arr[Math.floor(Math.random() * arr.length)];&#xA;&#xA;    const generate = () =&gt; {&#xA;        document.getElementById(&#34;generated-value&#34;).textContent = sample(qualities_opposites) + &#39;-&#39; + sample(things);&#xA;    }&#xA;&#xA;    document.addEventListener(&#34;DOMContentLoaded&#34;, () =&gt; generate());&#xA;&#xA;    const copied = () =&gt; {&#xA;        const copyIcon = document.querySelector(&#34;#copy-button &gt; i&#34;);&#xA;        const oldClassName = copyIcon.className;&#xA;        copyIcon.className = &#34;fas fa-check fa-fw&#34;&#xA;        setTimeout(() =&gt; {copyIcon.className = oldClassName}, 400);&#xA;    }&#xA;&lt;/script&gt;&#xA;&lt;div class=&#34;grid-container full autocenter&#34; style=&#34;text-align: center&#34;&gt;&#xA;    &lt;div class=&#34;grid-container third&#34;&gt;&#xA;        &lt;strong class=&#34;h3-like value-header&#34; id=&#34;generated-value&#34;&gt;spring-sound-8516&lt;/strong&gt;&#xA;        &lt;button id=&#34;copy-button&#34; type=&#34;button&#34; onclick=&#34;navigator.clipboard.writeText(document.getElementById(&#39;generated-value&#39;).textContent); copied();&#34; aria-label=&#34;Copy Generated Name&#34;&gt;&#xA;            &lt;i id=&#34;copy-button&#34; class=&#34;far fa-copy fa-fw&#34;&gt;&lt;/i&gt;&#xA;        &lt;/button&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;input class=&#34;button button-primary&#34; type=&#34;button&#34; id=&#34;generate-button&#34; value=&#34;Try Again&#34; onclick=&#34;generate();&#34; &gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;&#xA;&lt;p&gt;&amp;ldquo;Heroku Name Generator – Kevin M Lawson&amp;rdquo;. &lt;a href=&#34;https://kevinmlawson.com/herokuname/&#34;&gt;https://kevinmlawson.com/herokuname/&lt;/a&gt;. Accessed 02 Sep. 2022&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
